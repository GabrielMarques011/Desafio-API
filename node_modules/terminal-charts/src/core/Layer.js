/**
 * Created by hustcc on 17/6/27.
 */

const invariant = require('../utils/invariant');
const types = require('../utils/types');

/**
 * 定义一个图层，图层包括一个范围和填充的内容
 * 也就是 draw 返回值
 */
class Layer {
  constructor(box = { x1: 0, y1: 0, x2: 0, y2: 0 }, ascii = [], zIndex = 0) {
    invariant(
      types.isBox(box) && types.isObject(ascii) && types.isNumber(zIndex),
      'TCharts: constructor props of Layer should be (Box, Array), got (%s, %s, %s).',
      types.typeof(box),
      types.typeof(ascii),
      types.typeof(zIndex));

    this.box = box;
    this.ascii = ascii;
    this.zIndex = zIndex;
  }

  /**
   * 按顺序合并另外的 layers
   * @param layer
   */
  merge = (...layers) => this.mergeArray(layers);

  /**
   * 合并一个 layer
   * @param layer
   */
  // eslint-disable-next-line
  mergeOne = (layer) => {
    // TODO 填充核心的 merge 方噶
    return this;
  };

  /**
   * 合并一个 layer
   * @param layer
   */
  mergeArray = (layers) => {
    // TODO :暂时不要 zIndex 排序特性
    // 首先先按照 zIndex 升序排列，越大越在上层
    // layers.sort((x, y) => x - y);
    // 排序之后遍历，先绘制底层的，后使用上层覆盖
    layers.forEach((layer) => {
      this.mergeOne(layer);
    });
    return this;
  };
}

module.exports = Layer;
